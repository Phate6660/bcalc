#!/bin/bash
## A calculator in pure-bash.
## I even made a pure-bash lexer for this.
## Not gonna lie I feel pretty accomplished right now.
## ---------------------------------------------------
## Created by: Phate6660 [https://github.com/Phate6660]
## Dependencies: Only bash ;)

# Get the first arg (since that's all we need), and add a space betweem each character.
args="$1"
for ((i=0; i<${#args}; i++)); do
    args_spaces+="${args:$i:1} "
done

# Read each space-separated character into the array.
# shellcheck disable=SC2162
read -a args_array <<< "$args_spaces"

declare -A operation_array=()

# Iterate over the argument array.
# TODO: Figure out how to create appropriately titled variables on demand.
# I feel as though that would be the best way to solve the problem of
# having a hardcoded amount of numbers and operators in the script.
n=0
for i in "${args_array[@]}"; do
    # Check if "$i" is a number, and if so...
    if [ "$i" == "[" ] || [ "$i" == "]" ]; then
        final_array+=("$i")
        continue
    fi
    if [[ "$i" =~ ^[0-9]+$ ]]; then
        final_array+=("$i")
        continue
    # Check if "$i" is a math operation...
    elif [ "$i" == "*" ] || [ "$i" == "/" ] || [ "$i" == "+" ] || [ "$i" == "-" ]; then
        n=$((n + 1))
        final_array+=("$i")
        n=$((n + 1))
        continue
    else
        echo "Only digits, '*', '/', '+', and '-', are supported. '$i' is currently unsupported." && exit 1
    fi
done


final_array_count="${#final_array[@]}"
a=0
for ((z=0;z<=final_array_count;z++)); do
    if [ "$z" = "$final_array_count" ]; then
        break
    else
        if [ "${final_array[$z]}" == "[" ]; then
            multi=true
            continue
        fi
        if [ "${final_array[$z]}" == "]" ]; then
            multi=false
            mn="${mn[*]}"
            mn="${mn// /}"
            number_array+=("$mn")
            unset mn
            continue
        fi
        if [[ "${final_array[$z]}" =~ ^[0-9]+$ ]]; then
            if [ -z "$multi" ]; then
                number_array+=("${final_array[$z]}")
                continue
            else
                if [ "$multi" == true ]; then
                    mn+=("${final_array[$z]}")
                    continue
                else
                    number_array+=("${final_array[$z]}")
                    continue
                fi
            fi
        elif [ "${final_array[$z]}" == "*" ] || [ "${final_array[$z]}" == "/" ] || [ "${final_array[$z]}" == "+" ] || [ "${final_array[$z]}" == "-" ]; then
            operation_array+=( ["$a"]="${final_array[$z]}" )
            a=$((a + 1))
            continue
        fi
    fi
done

number_count="${#number_array[@]}"
operation_count="${#operation_array[@]}"

e=0
for ((f=0;f<=final_array_count;f++)); do
    if [ "$f" = "$number_count" ]; then
        break
    else
        calculation_array+=("${number_array[$e]}")
        if [ "$f" = "$operation_count" ]; then
            continue
        else
            calculation_array+=("${operation_array[$e]}")
            e=$((e + 1))
            continue
        fi
    fi
done

calculation="${calculation_array[*]}"
calculation="${calculation// /}"
echo $(("$calculation"))
