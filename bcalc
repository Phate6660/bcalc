#!/bin/bash
## A calculator in pure-bash.
## I even made a pure-bash lexer for this.
## Not gonna lie I feel pretty accomplished right now.
## ---------------------------------------------------
## Created by: Phate6660 [https://github.com/Phate6660]
## Dependencies: Only bash ;)

# Get the first arg (since that's all we need), and add a space betweem each character.
args="$1"
for ((i=0; i<${#args}; i++)); do
    args_spaces+="${args:$i:1} "
done

# Read each space-separated character into the array.
# shellcheck disable=SC2162
read -a args_array <<< "$args_spaces"

# Iterate over the argument array.
n=0
for char in "${args_array[@]}"; do
    # Check if "$char" is a square bracket, and if so append to final_array.
    if [ "$char" == "[" ] || [ "$char" == "]" ]; then
        final_array+=("$char")
        continue
    fi
    # Check if "$char" is a number, and if so append to final_array.
    if [[ "$char" =~ ^[0-9]+$ ]]; then
        final_array+=("$char")
        continue
    # Check if "$char" is a math operation, and if so append to final_array.
    elif [ "$char" == "*" ] || [ "$char" == "/" ] || [ "$char" == "+" ] || [ "$char" == "-" ]; then
        # Up n by 1 before and after appending the math operation to account for array index offsets.
        n=$((n + 1))
        final_array+=("$char")
        n=$((n + 1))
        continue
    else
        # If the character isn't a square bracket, digit, or math operation, display an error message and exit.
        echo "Only digits, '*', '/', '+', and '-', are supported. '$i' is currently unsupported." && exit 1
    fi
done

if [ "$2" == "--debug" ]; then
    echo "final_array = ${final_array[*]}"
fi

final_array_count="${#final_array[@]}"
a=0
for ((b=0;b<=final_array_count;b++)); do
    if [ "$b" = "$final_array_count" ]; then
        # No more looping is needed, break.
        break
    else
        # The next 2 if statements are for dealing with brackets, which are used to signify multi-digit numbers.
        if [ "${final_array[$b]}" == "[" ]; then
            multi=true
            continue
        fi
        if [ "${final_array[$b]}" == "]" ]; then
            multi=false
            mn="${mn[*]}"
            mn="${mn// /}"
            number_array+=("$mn")
            unset mn
            continue
        fi
        # If the element is a number...
        if [[ "${final_array[$b]}" =~ ^[0-9]+$ ]]; then
            # If "$multi" hasn't been set, append to number_array like normal.
            if [ -z "$multi" ]; then
                number_array+=("${final_array[$b]}")
                continue
            else
                # If "$multi is true", append the contents of the element to the mn variable.
                if [ "$multi" == true ]; then
                    mn+=("${final_array[$b]}")
                    continue
                else
                    number_array+=("${final_array[$b]}")
                    continue
                fi
            fi
        # If the element is an operation, append to operation_array.
        elif [ "${final_array[$b]}" == "*" ] || [ "${final_array[$b]}" == "/" ] || [ "${final_array[$b]}" == "+" ] || [ "${final_array[$b]}" == "-" ]; then
            operation_array+=("${final_array[$b]}")
            a=$((a + 1))
            continue
        fi
    fi
done

if [ "$2" == "--debug" ]; then
    echo -e "number_array = ${number_array[*]}\noperation_array = ${operation_array[*]}"
fi
number_count="${#number_array[@]}"
operation_count="${#operation_array[@]}"

c=0
for ((d=0;d<=final_array_count;d++)); do
    if [ "$d" = "$number_count" ]; then
        break
    else
        calculation_array+=("${number_array[$c]}")
        if [ "$d" = "$operation_count" ]; then
            continue
        else
            calculation_array+=("${operation_array[$c]}")
            c=$((c + 1))
            continue
        fi
    fi
done

calculation="${calculation_array[*]}"
calculation="${calculation// /}"
if [ "$2" == "--debug" ]; then
    echo "calculation = $calculation"
fi
echo $(("$calculation"))
