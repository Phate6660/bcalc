#!/bin/bash
## A calculator in pure-bash.
## I even made a pure-bash lexer for this.
## Not gonna lie I feel pretty accomplished right now.
## ---------------------------------------------------
## Created by: Phate6660 [https://github.com/Phate6660]
## Dependencies: Only bash ;)

if [ "$2" == "--debug" ]; then
    echo "all arguments to script = $*"
fi

# Get the first arg (since that's all we need), and add a space between each character.
args="$1"
for ((i=0; i<${#args}; i++)); do
    args_spaces+="${args:${i}:1} "
done

# Read each space-separated character into the array.
# shellcheck disable=SC2162
read -a args_array <<< "${args_spaces}"

# Iterate over the argument array.
n=0
for char in "${args_array[@]}"; do
    # Check if "$char" is a parenthesis, and if so append to final_array.
    if [ "${char}" == "(" ] || [ "${char}" == ")" ]; then
        final_array+=("${char}")
        continue
    # Check if "$char" is a number, and if so append to final_array.
    elif [[ "${char}" =~ ^[0-9]+$ ]]; then
        final_array+=("${char}")
        continue
    # Check if "$char" is a math operation, and if so append to final_array.
    elif [ "${char}" == "^" ] \
        || [ "${char}" == "*" ] \
        || [ "${char}" == "/" ] \
        || [ "${char}" == "%" ] \
        || [ "${char}" == "+" ] \
        || [ "${char}" == "-" ]; then
        # Up n by 1 before and after appending the math operation to account for array index offsets.
        n=$((n + 1))
        final_array+=("${char}")
        n=$((n + 1))
        continue
    else
        # If the character isn't a digit, math operation, or parenthesis, display an error message and exit.
        echo -e "Only digits, parenthesis, '^', '*', '/', '+', and '-', are supported.\n'${char}' is currently unsupported."
        exit 1
    fi
done

if [ "$2" == "--debug" ]; then
    echo "final_array = ${final_array[*]}"
fi

final_array_count="${#final_array[@]}"
a=0
for ((b=0;b<=final_array_count;b++)); do
    if [ "${b}" = "${final_array_count}" ]; then
        if [ -n "${mn}" ]; then
            if [ "$2" == "--debug" ]; then
                echo "mn = ${mn[*]}"
            fi
            numbers="${mn[*]}"
            unset mn
            numbers="${numbers// /}"
            if [ "$2" == "--debug" ]; then
                echo "numbers = ${numbers}"
            fi
            number_array+=("${numbers}")
            unset numbers
            break
        else
            # No more looping is needed. Break!
            break
        fi
    else
        # Check if the character is an opening parenthesis...
        if [ "${final_array[${b}]}" == "(" ]; then
            paren=true
            continue
        # Check if the character is a closing parenthesis...
        elif [ "${final_array[${b}]}" == ")" ]; then
            paren=false
            ip="${ip[*]}"
            ip="${ip// /}"
            ip=$(("${ip}"))
            if [ "$2" == "--debug" ]; then
                echo "ip = ${ip}"
            fi
            number_array+=("${ip}")
            unset ip
            continue
        # If the element is an operation, append to operation_array.
        elif [ "${final_array[${b}]}" == "^" ] \
            || [ "${final_array[${b}]}" == "*" ] \
            || [ "${final_array[${b}]}" == "/" ] \
            || [ "${final_array[${b}]}" == "%" ] \
            || [ "${final_array[${b}]}" == "+" ] \
            || [ "${final_array[${b}]}" == "-" ]; then
            if [ "${paren}" == true ]; then
                ip+=("${final_array[${b}]}")
            else
                operation_array+=("${final_array[${b}]}")
                a=$((a + 1))
            fi
            if [ -n "${mn}" ]; then
                if [ "$2" == "--debug" ]; then
                    echo "mn = ${mn[*]}"
                fi
                numbers="${mn[*]}"
                unset mn
                numbers="${numbers// /}"
                if [ "$2" == "--debug" ]; then
                    echo "numbers = ${numbers}"
                fi
                number_array+=("${numbers}")
                unset numbers
                continue
            else
                continue
            fi
        # If the element is a number...
        elif [[ "${final_array[${b}]}" =~ ^[0-9]+$ ]]; then
            # If "$paren" is set...
            if [ "${paren}" == true ]; then
                 ip+=("${final_array[${b}]}")
                 continue
            else
                mn+=("${final_array[${b}]}")
                continue
            fi
        fi
    fi
done

number_count="${#number_array[@]}"
operation_count="${#operation_array[@]}"

if [ "$2" == "--debug" ]; then
    # This is useful for seeing the contents of each index of the number_array and operation_array variables.
    for ((d=0;d<=number_count;d++)); do
        echo "number_array[$d] = ${number_array[$d]}"
        for ((e=0;e<=operation_count;e++)); do
            echo "operation_array[$e] = ${operation_array[$e]}"
        done
    done
    # This is useful to make sure that the counts in the arrays are accurate to what they should be.
    echo -e "number_count = ${number_count}\noperation_count = ${operation_count}"
fi

# Assemble the final calculation variable.
f=0
for ((g=0;g<=final_array_count;g++)); do
    if [ "${g}" = "${number_count}" ]; then
        break
    else
        calculation_array+=("${number_array[${f}]}")
        if [ "${g}" == "${operation_count}" ]; then
            continue
        else
            calculation_array+=("${operation_array[${f}]}")
            f=$((f + 1))
            continue
        fi
    fi
done

# $calculation = the entire calculation array.
calculation="${calculation_array[*]}"
# Remove all spaces in calculation.
calculation="${calculation// /}"
# Replace any instances of `^` with `**`, as that is what bash uses for exponents.
calculation="${calculation/\^/\*\*}"
if [ "$2" == "--debug" ]; then
    echo "calculation = ${calculation}"
fi

# Conditions are as follows;
# IF there is a second argument AND it does not equal "--debug" OR If there is a third argument,
# THEN format the output based on the contents of the third argument (e.g. 1,000 or 1.000),
# ELSE print non-formatted output (e.g. 1000).
if [ -n "$2" ] && [ "$2" != "--debug" ] || [ -n "$3" ]; then
    # Run the calculation and save the output to the aptly named variable, "output".
    output=$((calculation))

    for ((h=0; h<${#output}; h++)); do
        output_spaces+="${output:${h}:1} "
    done

    # shellcheck disable=SC2162
    read -a output_array <<< "${output_spaces}"

    if [ "$2" == "--debug" ]; then
        echo "output_array = ${output_array[*]}"
    fi

    output_array_count="${#output_array[@]}"
    j=0
    # Iterate over output array...
    for k in "${output_array[@]}"; do
        # Print a single digit without a newline
        printf "%s" "${k}"
        if [ "$2" != "--debug" ] && [ "$2" == "," ] || [ "$3" == "," ]; then
            # We need to print the formatting character after every three digits, so:
            # IF j/3 equals 0 AND j does not equal the count of output_array minus one
            # THEN print the formmating character.
            if [ $((j%3)) -eq 0 ] && [ "${j}" != "$((output_array_count - 1))" ]; then
                printf "%s" ","
            fi
        elif [ "$2" != "--debug" ] && [ "$2" == "." ] || [ "$3" == "." ]; then
            if [ $((j%3)) -eq 0 ] && [ "${j}" != "$((output_array_count - 1))" ]; then
                printf "%s" "."
            fi
        fi
        j=$((j + 1))
    done
    exit 0
else
    echo "$((calculation))"
    exit 0
fi
