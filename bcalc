#!/bin/bash
## A calculator in pure-bash.
## I even made a pure-bash lexer for this.
## Not gonna lie I feel pretty accomplished right now.
## ---------------------------------------------------
## Created by: Phate6660 [https://github.com/Phate6660]
## Dependencies: Only bash ;)

# Get the first arg (since that's all we need), and add a space between each character.
args="$1"
for ((i=0; i<${#args}; i++)); do
    args_spaces+="${args:${i}:1} "
done

# Read each space-separated character into the array.
# shellcheck disable=SC2162
read -a args_array <<< "${args_spaces}"

# Iterate over the argument array.
n=0
for char in "${args_array[@]}"; do
    # Check if "$char" is a parenthesis, and if so append to final_array.
    if [ "${char}" == "(" ] || [ "${char}" == ")" ]; then
        final_array+=("${char}")
        continue
    # Check if "$char" is a square bracket, and if so append to final_array.
    elif [ "${char}" == "[" ] || [ "${char}" == "]" ]; then
        final_array+=("${char}")
        continue
    # Check if "$char" is a number, and if so append to final_array.
    elif [[ "${char}" =~ ^[0-9]+$ ]]; then
        final_array+=("${char}")
        continue
    # Check if "$char" is a math operation, and if so append to final_array.
    elif [ "${char}" == "^" ] \
        || [ "${char}" == "*" ] \
        || [ "${char}" == "/" ] \
        || [ "${char}" == "%" ] \
        || [ "${char}" == "+" ] \
        || [ "${char}" == "-" ]; then
        # Up n by 1 before and after appending the math operation to account for array index offsets.
        n=$((n + 1))
        final_array+=("${char}")
        n=$((n + 1))
        continue
    else
        # If the character isn't a square bracket, digit, or math operation, display an error message and exit.
        echo -e "Only digits, parenthesis, square brackets, '*', '/', '+', and '-', are supported.\n'${char}' is currently unsupported." && exit 1
    fi
done

if [ "$2" == "--debug" ]; then
    echo "final_array = ${final_array[*]}"
fi

final_array_count="${#final_array[@]}"
a=0
for ((b=0;b<=final_array_count;b++)); do
    if [ "${b}" = "${final_array_count}" ]; then
        # No more looping is needed, break.
        break
    else
        # Check if the character is an opening parenthesis...
        if [ "${final_array[${b}]}" == "(" ]; then
            paren=true
            continue
        # Check if the character is a closing parenthesis...
        elif [ "${final_array[${b}]}" == ")" ]; then
            paren=false
            ip="${ip[*]}"
            ip="${ip// /}"
            ip="${ip/\^/\*\*}" # Replace `^` with `**`
            ip=$(("${ip}"))
            if [ "$2" == "--debug" ]; then
                echo "ip = ${ip}"
            fi
            number_array+=("${ip}")
            unset ip
            continue
        # Check if the character is an opening square bracket...
        elif [ "${final_array[${b}]}" == "[" ]; then
            multi=true
            continue
        # Check if the character is a closing square bracket...
        elif [ "${final_array[${b}]}" == "]" ]; then
            multi=false
            mn="${mn[*]}"
            mn="${mn// /}"
            if [ "$2" == "--debug" ]; then
                echo "mn = ${mn}"
            fi
            # If there are parenthesis, append to ip (in parenthesis) variable.
            if [ "${paren}" == true ]; then
                ip+=("${mn}")
            else 
                number_array+=("${mn}")
            fi
            unset mn
            continue
        # If the element is a number...
        elif [[ "${final_array[${b}]}" =~ ^[0-9]+$ ]]; then
            # If "$multi" or "$paren" is set...
            if [ -n "${multi}" ] || [ -n "${paren}" ]; then
                # If "$paren" is true and "$multi" is false, append the contents of the element to the ip variable.
                if [ "${paren}" == true ] && [ "${multi}" == false ]; then
                    ip+=("${final_array[${b}]}")
                    continue
                # Else if "$multi" is true, append the contents of the element to the mn variable.
                elif [ "${multi}" == true ]; then
                        mn+=("${final_array[${b}]}")
                        continue
                # Else assign it to number_array as normal.
                else
                    number_array+=("${final_array[${b}]}")
                    continue
                fi
            else
                number_array+=("${final_array[${b}]}")
                continue
            fi
        # If the element is an operation, append to operation_array.
        elif [ "${final_array[${b}]}" == "^" ] \
            || [ "${final_array[${b}]}" == "*" ] \
            || [ "${final_array[${b}]}" == "/" ] \
            || [ "${final_array[${b}]}" == "%" ] \
            || [ "${final_array[${b}]}" == "+" ] \
            || [ "${final_array[${b}]}" == "-" ]; then
            if [ -n "${paren}" ]; then
                if [ "${paren}" == true ] && [ "${multi}" == false ]; then
                    ip+=("${final_array[${b}]}")
                     continue
                else
                    operation_array+=("${final_array[${b}]}")
                    a=$((a + 1))
                    continue
                fi
            else
                operation_array+=("${final_array[${b}]}")
                a=$((a + 1))
                continue
            fi
        fi
    fi
done

number_count="${#number_array[@]}"
operation_count="${#operation_array[@]}"

if [ "$2" == "--debug" ]; then
    # This is useful for seeing the contents of each index of the number_array and operation_array variables.
    for ((d=0;d<=number_count;d++)); do
        echo "number_array[$d] = ${number_array[$d]}"
        for ((e=0;e<=operation_count;e++)); do
            echo "operation_array[$e] = ${operation_array[$e]}"
        done
    done
    # This is useful to make sure that the counts in the arrays are accurate to what they should be.
    echo -e "number_count = ${number_count}\noperation_count = ${operation_count}"
fi

# Assemble the final calculation variable.
f=0
for ((g=0;g<=final_array_count;g++)); do
    if [ "${g}" = "${number_count}" ]; then
        break
    else
        calculation_array+=("${number_array[${f}]}")
        if [ "${g}" == "${operation_count}" ]; then
            continue
        else
            calculation_array+=("${operation_array[${f}]}")
            f=$((f + 1))
            continue
        fi
    fi
done

calculation="${calculation_array[*]}"
calculation="${calculation// /}"
calculation="${calculation/\^/\*\*}"
if [ "$2" == "--debug" ]; then
    echo "calculation = ${calculation}"
fi

# Print the output in a formatted way; e.g. if there are enough numbers there would be a comma.
# Example: 1,000,000
printf "%'.f\n" $(("${calculation}"))
