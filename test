#!/usr/bin/env bash
## Tests for bcalc

## Create the debug directory if it doesn't exist.
if ! [ -d "./debug" ]; then mkdir debug; fi

## Common variables used for the tests.
exe="./bcalc"

## Basic math operations.
# Basic parenthesis test.
basic_paren() {
    # Local to keep them in the function.
    local expected="4"
    local command="${exe} '(1+1)*2'"
    local result="$(eval "${command}")"
    local debug_file="debug/basic_paren_test-debug-output"
    
    if [ "${result}" == "${expected}" ]; then
        basic_paren_test="GOOD -- The basic parenthesis test has passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        basic_paren_test="BAD  -- The result of the basic parenthesis test is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

# Basic exponent test.
basic_expon() {
    local expected="16"
    local command="${exe} 4^2"
    local result="$(eval "${command}")"
    local debug_file="debug/basic_expon_test-debug-output"
    
    if [ "${result}" == "${expected}" ]; then
        basic_expon_test="GOOD -- The basic exponent test has passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        basic_expon_test="BAD  -- The result of the basic exponent test is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

# Basic multiplication test.
basic_multi() {
    local expected="32"
    local command="${exe} 16*2"
    local result="$(eval "${command}")"
    local debug_file="debug/basic_multi_test-debug-output"
    
    if [ "${result}" == "${expected}" ]; then
        basic_multi_test="GOOD -- The basic multiplication test has passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        basic_multi_test="BAD  -- The result of the basic multiplication test is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

# Basic division test.
basic_divis() {
    local expected="64"
    local command="${exe} 128/2"
    local result="$(eval "${command}")"
    local debug_file="debug/basic_divis_test-debug-output"
    
    if [ "${result}" == "${expected}" ]; then
        basic_divis_test="GOOD -- The basic division test has passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        basic_divis_test="BAD  -- The result of the basic division test is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

# Basic addition test.
basic_addit() {
    local expected="128"
    local command="${exe} 64+64"
    local result="$(eval "${command}")"
    local debug_file="debug/basic_addit_test-debug-output"
    
    if [ "${result}" == "${expected}" ]; then
        basic_addit_test="GOOD -- The basic addition test has passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        basic_addit_test="BAD  -- The result of the basic addition test is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

# Basic subtraction test.
basic_subtr() {
    local expected="256"
    local command="${exe} 384-128"
    local result="$(eval "${command}")"
    local debug_file="debug/basic_subtr_test-debug-output"
    
    if [ "${result}" == "${expected}" ]; then
        basic_subtr_test="GOOD -- The basic subtraction test has passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        basic_subtr_test="BAD  -- The result of the basic subtraction test is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

## PEMDAS tests.
# Basic PEMDAS test.
basi_pemdas() {
    local expected="512"
    local command="${exe} '(1256-500+500)*(1+1)'"
    local result="$(eval "${command}")"
    local debug_file="debug/basi_pemdas_test-debug-output"
    
    if [ "${result}" == "${expected}" ]; then
        basi_pemdas_test="GOOD -- The basic PEMDAS test has passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        basi_pemdas_test="BAD  -- The result of the basic PEMDAS test is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

# Basic PEMDAS test 2.
bas_pemdas2() {
    local expected="1024"
    local command="${exe} '(1256-500+500)*(1+1)*2'"
    local result="$(eval "${command}")"
    local debug_file="debug/bas_pemdas2_test-debug-output"
    
    if [ "${result}" == "${expected}" ]; then
        bas_pemdas2_test="GOOD -- The second basic PEMDAS test has passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        bas_pemdas2_test="BAD  -- The result of the second basic PEMDAS test is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

## Error message tests.
# Notation error.
error_notat() {
    local expected="Currently other notations are unsupported, please start with a number."
    local command="${exe} +11"
    local result="$(eval "${command}")"
    local debug_file="debug/error_notat_test-debug-output"

    if [ "${result}" == "${expected}" ]; then
        error_notat_test="GOOD -- The error test for notations passed."
    else
        eval "bash -x ${command} --debug" &> "${debug_file}"
        error_notat_test="BAD  -- The result of the error test for notations is \"${result}\", when it should be \"${expected}\".\n    (A debug file is available at '${debug_file}'.)"
    fi
}

## Run the tests.
basic_paren && echo -e "${basic_paren_test}"
basic_expon && echo -e "${basic_expon_test}"
basic_multi && echo -e "${basic_multi_test}"
basic_divis && echo -e "${basic_divis_test}"
basic_addit && echo -e "${basic_addit_test}"
basic_subtr && echo -e "${basic_subtr_test}"
basi_pemdas && echo -e "${basi_pemdas_test}"
bas_pemdas2 && echo -e "${bas_pemdas2_test}"
error_notat && echo -e "${error_notat_test}"
